AWSTemplateFormatVersion: 2010-09-09
Description: >-
  youtube-grave-robber
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  AllowedOrigin:
    Type: String
    Default: "https://example.cloudfront.net"  # update after first deploy if needed
  YtKeySecretArn:
    Type: String
    Description: "ARN of Secrets Manager secret carrying YT_KEY"

Resources:
  # --- API (you likely already have these) ---
  HttpApi:
    Type: "AWS::Serverless::HttpApi"
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - !Ref AllowedOrigin
        AllowMethods: ["GET","OPTIONS"]
        AllowHeaders: ["Content-Type","Authorization","X-Requested-With"]

  ProxyFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Runtime: "nodejs18.x"
      Handler: "src/server/index.mjs"
      Architectures: ["arm64"]
      Events:
        Search:
          Type: "HttpApi"
          Properties:
            ApiId: !Ref HttpApi
            Path: "/yt/search"
            Method: "GET"
        Videos:
          Type: "HttpApi"
          Properties:
            ApiId: !Ref HttpApi
            Path: "/yt/videos"
            Method: "GET"
        OptionsAll:
          Type: "HttpApi"
          Properties:
            ApiId: !Ref HttpApi
            Path: "/{proxy+}"
            Method: "OPTIONS"
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigin
          ENABLE_ORIGIN_CHECK: "true"
          # Pull YT_KEY at runtime from Secrets Manager:
          YT_KEY: "{{resolve:secretsmanager:${YtKeySecretArn}:SecretString:YT_KEY}}"
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref YtKeySecretArn

  # --- Static site: S3 + CloudFront ---
  SiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${AWS::StackName}-site"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  SiteOAI:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${AWS::StackName} site"

  SiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowCloudFrontRead"
            Effect: "Allow"
            Principal:
              CanonicalUser: !GetAtt SiteOAI.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: !Sub "${SiteBucket.Arn}/*"

  CDN:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: "index.html"
        Origins:
          - Id: "site-origin"
            DomainName: !GetAtt SiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${SiteOAI}"
        DefaultCacheBehavior:
          TargetOriginId: "site-origin"
          ViewerProtocolPolicy: "redirect-to-https"
          AllowedMethods: ["GET","HEAD","OPTIONS"]
          CachedMethods: ["GET","HEAD"]
          Compress: true
          ForwardedValues:
            QueryString: false
        PriceClass: "PriceClass_100"

Outputs:
  ApiUrl:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
  SiteBucketName:
    Value: !Ref SiteBucket
  CloudFrontURL:
    Value: !Sub "https://${CDN.DomainName}"
